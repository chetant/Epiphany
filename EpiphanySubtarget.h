//==-- EpiphanySubtarget.h - Define Subtarget for the Epiphany ---*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Epiphany specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_TARGET_EPIPHANY_SUBTARGET_H
#define LLVM_TARGET_EPIPHANY_SUBTARGET_H

#include "llvm/ADT/Triple.h"
#include "llvm/Target/TargetSubtargetInfo.h"
#include "EpiphanyInstrInfo.h"
#include "EpiphanyISelLowering.h"
#include "EpiphanyFrameLowering.h"

#define GET_SUBTARGETINFO_HEADER
#include "EpiphanyGenSubtargetInfo.inc"

#include <string>

namespace llvm {
class StringRef;
class GlobalValue;

class EpiphanySubtarget : public EpiphanyGenSubtargetInfo {
protected:
  /// TargetTriple - What processor and OS we're targeting.
  Triple TargetTriple;
  EpiphanyFrameLowering FrameLowering;
  EpiphanyInstrInfo InstrInfo;
  EpiphanyTargetLowering TLInfo;
private:
  EpiphanySubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

public:
  /// This constructor initializes the data members to match that
  /// of the specified triple.
  ///
  EpiphanySubtarget(const Triple &TT, StringRef CPU, StringRef FS, const TargetMachine &TM);

  /// ParseSubtargetFeatures - Parses features string setting specified
  /// subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool GVIsIndirectSymbol(const GlobalValue *GV, Reloc::Model RelocM) const;

  bool isTargetELF() const { return TargetTriple.isOSBinFormatELF(); }
  bool isTargetLinux() const { return TargetTriple.getOS() == Triple::Linux; }

  const EpiphanyInstrInfo *getInstrInfo() const override { return &InstrInfo; }

  const EpiphanyRegisterInfo *getRegisterInfo() const override {
    return &getInstrInfo()->getRegisterInfo();
  }

  const EpiphanyFrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }

  const EpiphanyTargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }


};
} // End llvm namespace

#endif  // LLVM_TARGET_EPIPHANY_SUBTARGET_H
